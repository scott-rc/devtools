name: "Set up environment"
description: ""
inputs:
  CACHIX_AUTH_TOKEN:
    description: "Cachix authentication token"
    required: true
runs:
  using: composite
  steps:
    - name: Install nix
      uses: nixbuild/nix-quick-install-action@v22
      with:
        nix_conf: experimental-features = nix-command flakes

    - uses: cachix/cachix-action@v12
      with:
        name: devtools
        authToken: "${{ inputs.CACHIX_AUTH_TOKEN }}"
        extraPullNames: nix-community

    - name: Add nix devshell to .bash_profile
      shell: bash
      run: nix print-dev-env --show-trace >> "$HOME/.bash_profile"

    - name: Cache Deno modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/deno
          ~/Library/Caches/deno
        key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}
        restore-keys: |
          ${{ runner.os }}-deno-${{ hashFiles('**/deno.lock') }}
          ${{ runner.os }}-deno-

    - name: Download Deno modules
      shell: bash -l {0}
      run: |
        deno cache ./src/deps.ts
        deno cache ./test/deps.ts

    - if: ${{ runner.os == 'macOS' }}
      name: Setup mkcert
      shell: bash -l {0}
      run: |
        # Unlock the runner's keychain so mkcert's root-level cert installation stuff works
        # On real development machines this throws up a gui prompt that a human fills in
        security unlock-keychain -p runner login.keychain
        sudo security authorizationdb write com.apple.trust-settings.admin allow

    - name: Install mkcert
      shell: bash -l {0}
      run: |
        mkcert -install
